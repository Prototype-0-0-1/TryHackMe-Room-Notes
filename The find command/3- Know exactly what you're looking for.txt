##Know exactly what you're looking for
--------------------------------------
In some situations, specifying just the name of a file will not be enough. You can also specify the owner, the size, the permissions, and the time the file was last accessed/modified as well.

The username of the owner of a file is specified with the -user flag.

The size of a file is specified with the -size flag. When using numerical values, the formats -n, +n, and n can be used, where n is a number. -n matches values lesser than n, +n matches values greater than n, and n matches values exactly n. To specify a size, you also need a suffix. c is the suffix for bytes, k for KiB’s, and M for MiB’s. So, if you want to specify a size less than 30 bytes, the argument -30c should be used.

The -perm flag is used to specify permissions, either in octal form (ex. 644) or in symbolic form (ex. u=r). See here for a short reference. If you specify the permission mode as shown above (ex. 644 or u=r), then find will only return files with those permissions exactly. You can use the – or / prefix to make your search more inclusive. Using the – prefix will return files with at least the permissions you specify; this means that the -444 mode will match files that are readable by everyone, even if someone also has write and/or execute permissions. Using the / prefix will return files that match any of the permissions you have set; this means that the /666 mode will match files that are readable and writeable by at least one of the groups (owner, group, or others).

Lastly, time-related searches will be covered. These are more complex but may prove useful. The flag consists of a word and a prefix. The words are min and time, for minutes and days, respectively. The prefixes are a, m, and c, and are used to specify when a file was last accessed, modified, or had its status changed. As for the numerical values, the same rules of the -size flag apply, except there is no suffix. To put it all together: in order to specify that a file was last accessed more than 30 minutes ago, the option -amin +30 is used. To specify that it was modified less than 7 days ago, the option -mtime -7 is used. (Note: when you want to specify that a file was modified within the last 24 hours, the option -mtime 0 is used.)

- Find all files owned by the user "kittycat"
-->
To find all the files, we begin with '''find / -type f'''
Since, we are finding files owned by a user, we use the ''' -user ''' argument, followed by the username ''' kittycat ''' 
-->
-- find / -type f -user kittycat

- Find all files that are exactly 150 bytes in size
-->
To find all the files, we begin with '''find / -type f'''
We use the ''' -size ''' to specify the size. 
We use the format ''' n ''' to specify the exact size.
We speicfy ''' 150c ''' to specify exactly 150 bytes.
-->
-- find / -type f -size 150c

- Find all files in the /home directory (recursive) with size less than 2 KiB’s and extension ".txt"
-->
To find all the files in /home, we begin with '''find /home -type f'''
We use the ''' -size ''' to specify the size. We speicfy ''' -2k ''' to less thn 2 KiB.
We use ''' -name ''' to filter through the results using a pattern
Now the pattern would be matched against ''' "*.txt" ''', This will ensure that all possibilities with the extension of .txt are considered
-->
-- find /home -type f -size -2k -name "*.txt"

- Find all files that are exactly readable and writeable by the owner, and readable by everyone else (use octal format)
-->
To find all the files, we begin with '''find / -type f'''
We use '''-perm''' to specify the permissions. 
Since we are finding per exact permissions, we use the permission directly(without - or /)
rwx rwx rwx (user group other) -[We need to see, rw for owner and r for everyone else]-
Thus, 110 100 100 would be the permissions. Which is ''' 644 '''
-->
-- find / -type f -perm 644

- Find all files that are only readable by anyone (use octal format)
-->
To find all the files, we begin with '''find / -type f'''
We use '''-perm''' to specify the permissions. 
rwx rwx rwx (user group other) -[We need to see, r for everyone]-
Thus, 100 100 100 would be the permissions. Which is ''' 444 '''
Using / will match files at least one of the groups (owner, group, or others).
-->
-- find / -type f -perm /444

- Find all files with write permission for the group "others", regardless of any other permissions, with extension ".sh" (use symbolic format)
-->
To find all the files, we begin with '''find / -type f'''
We use '''-perm''' to specify the permissions. 
Since we will be ignoring all other permissions, we use ''' - '''
Thus, the permission pattern would be: ''' -o=w ''' (Since symbolic)
We use ''' -name ''' to filter through the results using a pattern
Now the pattern would be matched against ''' "*.sh" ''', This will ensure that all possibilities with the extension of .sh are considered
-->
-- find / -type f -perm -o=w -name "*.sh"

- Find all files in the /usr/bin directory (recursive) that are owned by root and have at least the SUID permission (use symbolic format)
-->
To find all the files in /usr/bin, we begin with '''find /usr/bin -type f'''
Since, we are finding files owned by a user, we use the ''' -user ''' argument, followed by the username ''' root '''
We use '''-perm''' to specify the permissions. 
Since we will be ignoring all other permissions, we use ''' - '''
Thus, the permission pattern would be: ''' -u=s ''' (Since symbolic)
-->
-- find /usr/bin -type f -user root -perm -u=s

- Find all files that were not accessed in the last 10 days with extension ".png"
-->
To find all the files, we begin with '''find / -type f'''
We use ''' time ''' since we are dealing with days
Ww use the argument ''' -atime ''' since, we are finding access
And the value will be ''' +10 ''' since, we are dealing with more than 10 days
We use ''' -name ''' to filter through the results using a pattern
Now the pattern would be matched against ''' "*.png" ''', This will ensure that all possibilities with the extension of .png are considered
-->
-- find / -type f -atime +10 -name "*.png"

- Find all files in the /usr/bin directory (recursive) that have been modified within the last 2 hours
-->
To find all the files in /usr/bin, we begin with '''find /usr/bin -type f'''
We use ''' min ''' since we are dealing with minutes
We use the argument ''' -mmin ''' since we are dealing with modified time
We use the value ''' -120 ''' since 2 hours = 120 minutes and the - sign, since we aare finding in terms of recent from current time
-->
-- find /usr/bin -type f -mmin -120
