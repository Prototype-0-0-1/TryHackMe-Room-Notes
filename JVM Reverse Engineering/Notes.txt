
The java bytecode to print "Hello World" to console is shown below:

    getstatic java/lang/System.out:Ljava/io/PrintStream; // Retrieve the static variable "out" in the System class and store it on the stack
    ldc "Hello World" // Load the string "Hello World" onto the stack
    invokevirtual java/io/PrintStream.println:(Ljava/lang/String;)V // Invoke the "println" function on the System.out variable using the string at the top of the stack as an argument

For more information on the JVM instruction set I highly recommend https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings.

Classes are compiled into .class files, one class per file. These can reference other classes which will be linked by the JVM at runtime. By using a parser such as javap we are able to see the methods and fields present in a class. Each will have a name and a descriptor. The descriptor is a representation of the arguments and return type a method can take, or the type of a field.

The following method:
    void main(String[] args, int i)

would produce this descriptor and name:
    main([Ljava/lang/String;I)V

The args are surrounded in brackets. A [ brace represents an array. An object is represented by a fully qualified internal name prepended by an L and appended by an ;. The I represents an Int, and the V at the end represents the type void. A full writeup on descriptors can be seen here: https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.3.

Javap is a tool bundled with JDK releases that can disassemble compiled classes. Example usage:
(p = show private members, v = verbose)

javap -v -p HelloWorld.class

Using javap

    Usage: javap <options> <classes>
    where possible options include:
    -help  --help  -?        Print this usage message
    -version                 Version information
    -v  -verbose             Print additional information
    -l                       Print line number and local variable tables
    -public                  Show only public classes and members
    -protected               Show protected/public classes and members
    -package                 Show package/protected/public classes
                            and members (default)
    -p  -private             Show all classes and members
    -c                       Disassemble the code
    -s                       Print internal type signatures
    -sysinfo                 Show system info (path, size, date, MD5 hash)
                            of class being processed
    -constants               Show final constants
    -classpath <path>        Specify where to find user class files
    -cp <path>               Specify where to find user class files
    -bootclasspath <path>    Override location of bootstrap class files


Consider the following bytecode:
(Assume = is the top of the stack)
LDC 0 : Load into stack
    Stack: 0 =
LDC 3 : Load into stack
    Stack: 0 3 =
SWAP : Swap top 2 elements of the stack
    Stack: 3 0 =
POP : Pop the top most element in the stack
    Stack: 3 =
INEG : Negate Integer
    Stack: -3 =

- Which value is now at the top of the stack?
--> Visible from the above result. (Without the = sign ofc)

- Which opcode is used to get the XOR of two longs? (answer in lowercase)
--> https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions --> bitwise XOR of two longs

- What does the -v flag on javap stand for? (answer in lowercase)
--> More info = verbose++

Complete the follow challenges.

- Find the name of the file that this class was compiled from (AKA Source File)
--> Use the -c command in javap

- What is the super class of the Main class? (Using internal name format, i.e. /)
--> -c will solve this problemo as well

- What is the value of the local variable in slot 1 when the method returns? (In decimal format)
--> Read the decomplied code. It will be understood

The given class file takes a password as a parameter. You need to find the correct one. Tools like javap will be sufficient.

- What is the correct password
--> After decompilation, the password string would be directly visible

Like the previous task, this program takes a password as an argument, and outputs whether or not it is correct. This time the string is not directly present in the class file, and you will need to use either a decompiler, bytecode analysis or virtualisation to find it.

- What is the correct password?
--> 
Here, a function is used on the static password and then compared to the user input.
Thus, the correct answer would be the output of the function when used on the static password.
I used java decompiler gui (https://github.com/java-decompiler/jd-gui) to see the function
Since the function was simple, I coded the same in python and passed in the static password to create the correct answer.
-->

https://asm.ow2.io/
ASM is a powerful open source library for manipulating bytecode. It gives a high level representation of bytecode that is easy to parse and modify.

https://github.com/java-deobfuscator/deobfuscator
You can use asm to programmatically remove obfuscation in java applications. Java Deobfuscator is an open source project that aims to use ASM to remove common obfuscation. They provide already implemented transformers, as well as the ability to make your own. A simple way to solve advanced crackmes like the one below is to virtualise method calls, for example the method calls to decrypt the strings. Java deobfuscator provides the necessary tools to do this, and there are prewritten examples that you can adapt to any program.

This program follows the same logic as the previous task, however it has a custom obfuscation layered on top. You might require a decompiler for this, as well as custom tools. This uses anti virtualisation techniques as well, so be warned.

- Find the correct password
--> 
For this, I decompiled the code using JD-GUI to see what is the code. I saw a function 'c' applied on the output of class '1's method called 'a' when given certain paramaters.
So, upon not giving an input, we also get the output from the same '1.a' function.
Thus, the best course of action seemed to be, just replace those print contents with the c(1.a()) function contents. Thus, it gives us the answer directly.

So, extracted the component files of the jar file by using "jar -xf file_name.jar"
Then, using the Java ByteCode Editor, replaced the output line for no input by the lines for c(1.a()) function with proper parameters.
Note: Open the .class file, so that we can patch the changes we need
The code went as follows:
    getstatic println
    load the first parameter of 1.a
    load the next parameter of 1.a
    invokestatic 1.a method
    invokestatic c method (in the same class as the current code)
    invokevirtual println

This were the modified lines of code in the ByteCode Editor
Then, hit the save button.

Then, patch this file using the command "jar uf file_name.jar class_name.class"
Then run the code again. The weird random string is actually the answer. 
-->

This final jar has nearly every exploit I know packed into it. I dont know of any decompilers that will work for it. You will have to use custom tools and bytecode analysis to pick apart this one.
Same format as the previous tasks, takes one argument as the password.

- What is the correct password?
--> 
Used as a reference: https://github.com/ChrisPritchard/ctf-writeups/blob/master/tryhackme/jvmreverseengineering.md
I would have never thought of using binwalk. Have a lot to learn!
Also used the tool: https://github.com/Storyyeller/Krakatau
I followed the exact same steps as said in the writeup. Really helpful!

But during the assembling step, if any error about encoding occurs,  go to 
> assemble.py
>> line 16
>>> with open(filename, 'rU') as f:
Change it to:
>>> with open(filename, 'rU',encoding="utf8") as f:

Adding the UTF will fix the encoding related problem.

The way to get the password is the same way we completed in the previous task. Reverse engineer the statements. Which 1.a() functions give what data.
Like finding that 4,42 is please provide a password. In this way, we would also get to know, what parameters of 1.a() would be used in order to compare against our given input.
Again, just like the previous step, we find the make c(1.a()) in place of the output for Please provide a password string.

And we would have it.
-->