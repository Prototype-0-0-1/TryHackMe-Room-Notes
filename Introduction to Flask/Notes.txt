##Introduction to Flask
-------------------------------------------------------------------
#Introduction
To be short, Flask does not require much work from you and can be coded and deployed in a matter of a couple of minutes!

https://github.com/Swafox/Flask-examples <-- Here's the collection of all scripts that are going to be used in this room.
-------------------------------------------------------------------
#Installation and Deployment basics

pip3 install Flask


Virtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating systemâ€™s packages. 
Run pip3 install virtualenv if you get an error running venv later on.

On Linux run:
    mkdir myproject 
    cd myproject 
    python3 -m venv venv

On Windows:
    mkdir myproject 
    cd myproject 
    py -3 -m venv venv

Now you need to create and set a Flask file, aka a script that is going to contain the flask code. Create a file with a name of your choice and run the following command depending on your system:
Windows: set FLASK_APP=hello.py
Linux: export FLASK_APP=hello.py

And that's that! All you have to do now is run
flask run 
or 
flask run --host=0.0.0.0
to deploy a flask app locally or publically (on your network).

Note: You are going to get an error if you deploy the app at this point since we have no code written.

- Which environment variable do you need to change in order to run Flask?
-- FLASK_APP
--> It is the name of the environment variable that holds the name of the file having the flask code
-------------------------------------------------------------------
#Basic syntax and routing

'''''
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello, TryHackMe!'
'''''
As you can see, we first imported the Flask library (line 1), then defined a variable app to be a flask project. 
Then we assign a function hello_world to the / root address of the web page. So the application should display 'Hello,  TryHackMe!' on the deployed website. Check if that's the case!

You might have noticed that on line 4 we were using an app.route method. In Flask this allows us to create different pages and dynamic URLs. Simply make a few changes in the code and you can add a new page to our application. 

'''''
from flask import Flask
app = Flask(__name__)
@app.route('/')
def home():
    return 'Home Page'

@app.route('/admin')
def admin():
    return 'Admin Page'
'''''
Now you'll see two different messages if you browse to http://127.0.0.1:5000/ or http://127.0.0.1:5000/admin 

- What's the default deployment port used by Flask?
-- 5000
--> By default, Flask is set to use the port number 5000.

- Is it possible to change that port? (yay/nay)
-- yay
--> in the main function, when calling app.run(), port=<port-number> can be provided to run at the selected port number
--> when calling 'flask run' from the command line, an argument '-p <port-number>' can be provided
-------------------------------------------------------------------
#HTTP Methods and Template Rendering
As you might already know, web applications use different HTTP methods when accessing URLs. Those usually are GET and POST. By default, a route (see task 3) only answers to GET requests. BUT, you can easily use the methods argument in the route() to handle different HTTP methods.

'''''
from flask import request
def do_the_login() :
    return 'This was a POST request'

def show_the_login_form() :
    return 'Not POST. Are you GETting me? :)'

@app.route('/login',methods=['GET','POST'])
def login():
    if request.method=='POST':
        return do_the_login()
    else:
        return show_the_login_form()
'''''

At the line: "@app.route('/login',methods=['GET','POST'])", Here we are separating HTTP methods into GET and POST in order to instruct Flask on how to handle them. Inside the function, we can make python differently respond to an incoming GET or POST request. In this case, a POST request would invoke a function do_the_login() and everything else would call a show_the_login_form() one.

Now, the Flask team has made our lives easier by creating a template rendering function inside Flask. It makes Flask automatically render HTML files into a website, making it easier to handle. 

'''''
from flask import render_template

@app.route('/rendered')
def hello(name=None) :
    return render_template('template. html',name=name)
'''
HTML example:
<!doctype html>
<title>Hello from Flask</title>
<h1>Hello again, TryHackMe</h1>
'''

'''''
Look at the code above and see how easy it is. Just add a render_template function and you'll get the desired result! I've also put a small HTML example for you to put inside the template.html file just to try it out. 

- Does Flask support POST requests? (yay/nay)
-- yay
--> you can easily use the methods argument in the route() to handle different HTTP methods.

- What markdown language can you use to make templates for Flask? 
-- HTML
-------------------------------------------------------------------
#File Upload

Flask also makes it easy for us to handle uploaded files.
You can access those files by looking at the files attribute on the request object. Each uploaded file is stored in that dictionary. It behaves just like a standard Python file object, but it also has a save() method that allows you to store that file on the filesystem of the server.
[Source: Flask documentation]
It is important to understand that you'll need a small HTML page with an upload form for this to work. (Example: https://www.w3schools.com/howto/howto_html_file_upload_button.asp)

'''''
from flask import request
from werkzeug . utils import secure_filename

@app.route('/upload',methods=['GET','POST'])
def upload_file() :
    if request.method == 'POST' :
        f = request.files['the_file']
        f.save('/var/www/uploads/'+ secure_filename(f.filename))
'''''

This is the way you can easily create an uploading page (/upload) using Flask. Flask is waiting for the POST request to be called and then uses a special save function to put those files somewhere on the system (you can change the location in any way you want). 
Note: Make sure not to forget to set the enctype="multipart/form-data" attribute on your HTML form, otherwise the browser will not transmit your files at all.

- Awesome!
-- -Yes-Awesome-and-Easy-
-------------------------------------------------------------------
#Flask Injection

At this point, it looks like Flask is a great framework for young developers. It definitely is a great tool but a simple misconfiguration may lead to severe security consequences.
The template engine provided within the Flask framework may allow developers to introduce Server-Side Template Injection (SSTI) vulnerabilities. 
An attacker can execute code within the context of the server. In some cases, it may lead to a full Remote Code Execution (RCE). 
For the sake of this room let's take a look at a bad code configuration and see how it can be used to exploit a Local File Inclusion (LFI)!

'''''
from flask import Flask, request, render_template_string, render_template
app = Flask(__name__)
@app.route('/vuln')
def hello_ssti() :
    person = {'name' : "HackerTHM", 'password' : "123456789"}
    request . args . get ( ' name' ) :
    person [ ' name ' ] = request . args . get ( ' name' )
    template = ' ''<h2>Hello %s!</h2>' '' % person[ 'name' ] # Problem
    return render_template_string (template, person=person)

def get_user_file (f_name) :
    with open (f_name) as f:
        return f. readlines()

app.jinja_env . globals['get_user_file'] = get_user_file
if __name__== "__main__:
    app.run (debug=True)

'''''
This is the vulnerable code in the room. And on the deployed machine.

The main reason for this vulnerability is that Jinja2 (template rendering engine) uses curly braces to surround variables used in the template. As you can see on the line with # Problem, our template is put in ''' ''' brackets which allow us to abuse the Jinja template mechanism. A variable after hello is parsing a name from a variable person. But because this is a vulnerable code we can make it output the password. 

MACHINE_IP:5000/vuln
--> This gave "Hello HackerTHM!"

Go to the MACHINE_IP:5000/vuln?name=
Simply put {{ person.password }} at the end of the link to see the password being displayed in cleartext. 
--> This gave "Hello 123456789!"
--> Here, 123456789! was the password of the person

Now let's take that vulnerability to another level and read files (LFI). 
{{ get_user_file("/etc/passwd") }}
--> This output the whole /etc/passwd file

The above string will allow you to read the /etc/passwd file or any other if you simply change the name.
This vulnerability can be easily mitigated by using a single quotation mark (' ') in the template variable (instead of ''' '''').  It may look ridiculous, but many python developers make these kinds of mistakes, and unintentionally make their websites vulnerable to SSTI.

- What's inside /home/flask/flag.txt ?
--> Just go to /vuln?name={{get_user_file("/home/flask/flag.txt")}} and it gives the flag
-------------------------------------------------------------------
#References and Sources

Thank you for completing this room! Make sure to code something in Flask :)
--> It was pretty informative :D

https://flask.palletsprojects.com/en/1.1.x/
https://www.tutorialspoint.com/flask/index.htm

https://blog.nvisium.com/injecting-flask <-- This do be great
https://pythonhosted.org/Flask-Uploads/